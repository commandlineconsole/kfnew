
https://www.infoq.com/articles/apache-kafka

// *******************
producer = new Producer(…);
message = new Message(“test message str”.getBytes());
set = new MessageSet(message);
producer.send(“topic1”, set);

streams[] = Consumer.createMessageStreams(“topic1”, 1)
for (message : streams[0]) {
bytes = message.payload();
// do something with the bytes
}

// ************** KafkaMailProducer ******************

public KafkaMailProducer(String topic, String directoryPath) {
       props.put("serializer.class", "kafka.serializer.StringEncoder");
       props.put("metadata.broker.list", "localhost:9092");
       producer = new kafka.javaapi.producer.Producer<Integer, String>(new ProducerConfig(props));
       this.topic = topic;
       this.directoryPath = directoryPath;
}

public void run() {
      Path dir = Paths.get(directoryPath);
      try {
           new WatchDir(dir).start();
           new ReadDir(dir).start();
      } catch (IOException e) {
           e.printStackTrace();
      }
}

// ************** KafkaMailConsumer ***************

public KafkaMailConsumer(String topic) {
       consumer =
Kafka.consumer.Consumer.createJavaConsumerConnector(createConsumerConfig());
       this.topic = topic;
}

private static ConsumerConfig createConsumerConfig() {
      Properties props = new Properties();
      props.put("zookeeper.connect", KafkaMailProperties.zkConnect);
      props.put("group.id", KafkaMailProperties.groupId);
      props.put("zookeeper.session.timeout.ms", "400");
      props.put("zookeeper.sync.time.ms", "200");
      props.put("auto.commit.interval.ms", "1000");
      return new ConsumerConfig(props);
}

public void run() {
      Map<String, Integer> topicCountMap = new HashMap<String, Integer>();
      topicCountMap.put(topic, new Integer(1));
      Map<String, List<KafkaStream<byte[], byte[]>>> consumerMap = consumer.createMessageStreams(topicCountMap);
      KafkaStream<byte[], byte[]> stream = consumerMap.get(topic).get(0);
      ConsumerIterator<byte[], byte[]> it = stream.iterator();
      while (it.hasNext())
      System.out.println(new String(it.next().message()));
}
// ***************************************
